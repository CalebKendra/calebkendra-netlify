---
title: "Fuzzing Book - 4"
date: 09/26/2023
date-format: long 
author: Caleb J. Kendra
categories: Fuzzing Book
subtitle: Mutation Analysis
title-block-banner: true
---

# Summary

The section `mutation analysis` covers the idea of creating programs that can test our test cases. Often we will find that ineffective testing can cause 100% test coverage but at the same time will be because of ineffective testing that means our tests ability to catch bugs is actually 0%. In order to fix this we can create mutation analysis programs that edit our code to create temporary but effective errors in order to test our test cases ability to find bugs. 

In the examples given in this article they test a `triangle` program and its ability to detect the triangle category based on the length of three inputted sides of a triangle. To analysize test cases in this function they first standardise the program by parsing and unparsing it in order to standardize the format of the function in a process called mutation. From there the analysis begins when `return` statements are replaced with `pass` statements. This should give an error as then certain categories of triangles will not be found when they should, causing an error. This program can then be run with each `return` statement individually in order to determine how accurate these test cases are for determining code coverage. 

The last section of this chapter talks about `equivilent mutants` which are faulty mutations in tested functions that essentially do the same as the base function. This means that these mutations will inflate the test coverage as they will never give off an error thats different from the original function. However, the amount of these false tests can be accounted for with statistical probability and so we can take into account that a certain percentage of cases will be faulty when we make our final code coverage calculations.

# Action & Reflection

For me, this article is something we could take into account into the `chasten` project for sure as we need to make sure that the test coverage can account for any different input that a user could potentally input with `XPATH` expressions. And so for this reason I find it vital to be able to make sure that our test cases are secure and can find many different errors and the best and most efficient way for us to check this is mutation analysis. Another point I would like to make is that many outside functions seem to do a lot of the hardest steps in mutation analysis for us and so implimenting these into your software would be a very easy way to improve the quality of your code overall. 
