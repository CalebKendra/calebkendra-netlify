---
title: "Fuzzing Book - 9"
date: 11/13/2023
date-format: long 
author: Caleb J. Kendra
categories: Fuzzing Book
subtitle: Reducing Failure-Inducing Inputs
title-block-banner: true
---

# Summary

This section of `Fuzzing Book` deals with ideas based around cutting down on the size of mutated inputs so that users can more easily identify what inputs cause errors. This means that very long and confusing inputs can be made into simple statements that show what inputs cause errors. For example a fuzzed input could look something like this at its full length:

```txt
7:,>((/$$-/->.;.=;(.%!:50#7*8=$&&=$9!%6(4=&69\':\'<3+0-3.24#7=!&60)2/+";+<7+1<2!4$>92+$1<(3%&5\'\'>#
```

If this statement were to give an error messege after testing it would be difficult to find out what section the error occured in. This is where <strong> delta debugging </strong> comes into place as we are able to cut down on this input until it looks something like this:

```txt
Test #1 ' 7:,>((/$$-/->.;.=;(.%!:50#7*8=$&&=$9!%6(4=&69\':\'<3+0-3.24#7=!&60)2/+";+<7+1<2!4$>92+$1<(3%&5\'\'>#' 97 FAIL
Test #2 '\'<3+0-3.24#7=!&60)2/+";+<7+1<2!4$>92+$1<(3%&5\'\'>#' 49 PASS
Test #3 " 7:,>((/$$-/->.;.=;(.%!:50#7*8=$&&=$9!%6(4=&69':" 48 PASS
Test #4 '50#7*8=$&&=$9!%6(4=&69\':\'<3+0-3.24#7=!&60)2/+";+<7+1<2!4$>92+$1<(3%&5\'\'>#' 73 FAIL
Test #5 "50#7*8=$&&=$9!%6(4=&69':<7+1<2!4$>92+$1<(3%&5''>#" 49 PASS
Test #6 '50#7*8=$&&=$9!%6(4=&69\':\'<3+0-3.24#7=!&60)2/+";+' 48 FAIL
Test #7 '\'<3+0-3.24#7=!&60)2/+";+' 24 PASS
Test #8 "50#7*8=$&&=$9!%6(4=&69':" 24 PASS
Test #9 '9!%6(4=&69\':\'<3+0-3.24#7=!&60)2/+";+' 36 FAIL
Test #10 '9!%6(4=&69\':=!&60)2/+";+' 24 FAIL
Test #11 '=!&60)2/+";+' 12 PASS
Test #12 "9!%6(4=&69':" 12 PASS
Test #13 '=&69\':=!&60)2/+";+' 18 PASS
Test #14 '9!%6(4=!&60)2/+";+' 18 FAIL
Test #15 '9!%6(42/+";+' 12 PASS
Test #16 '9!%6(4=!&60)' 12 FAIL
Test #17 '=!&60)' 6 PASS
Test #18 '9!%6(4' 6 PASS
Test #19 '6(4=!&60)' 9 FAIL
Test #20 '6(460)' 6 FAIL
Test #21 '60)' 3 PASS
Test #22 '6(4' 3 PASS
Test #23 '(460)' 5 FAIL
Test #24 '460)' 4 PASS
Test #25 '(0)' 3 FAIL
Test #26 '0)' 2 PASS
Test #27 '(' 1 PASS
Test #28 '()' 2 FAIL
Test #29 ')' 1 PASS
'()'
```

In this case we were able to shrink the input by using a divide and conquer method in order to find what specific section of code is causing the failure. 

While this method works for long strings, there are some inputs that this method does not work with. For example if we were working with inputs as mathmatical expressions then delta debugging would cut out key parts of equations. This is where we could introduce <strong> grammars and derivation trees </strong> in order to define each section of an input and parse it down find where the failure is. With an input of:

```txt
1 + (2 * 3)
```

This would look something like:

```txt
Test #1 '(2 * 3)' 7 FAIL
Test #2 '(3)' 3 FAIL
Test #3 '3' 1 PASS
'(3)'
```

This section showed us that our reducer is able to quickly find the statement inside of the equation without cutting it in half as it is able to identify the sections of the expressions that are connected with grammars.

# Action & Reflection

When using fuzzing inputs its great to see that there is a way to quickly find the sections of inputs that cause errors are this is a great way to be able to save even more time while using test cases. To be able to run tests and find exactly where your function will give an error massively cuts down on one of the biggest issues with fuzzing and that is the time that it takes to fix the many errors it gives. Identification of these specific problems allows us to come up with broader solutions to problems, leading to smarter solutions that last. 