---
title: "Software Engineering at Google - 9"
date: 11/13/2023
date-format: long
author: Caleb J. Kendra
categories: Software Engineering at Google
subtitle: Code Review
title-block-banner: true
---

# Summary

This section of `Software Engineering at Google` deals with the reviewing of code before it is merged to the main product. This has to do with the benefits, tips, and overall process that Google has in order to ensure that code review is done as efficiently and effectively as possible. Google uses a very detailed method in order to ensure correctness, consistency, a high level of knowledge sharing between developers, and a large record to be able to track changes made. While this process is costly, it ensures that the codebase maintains a level of consistancy that is up to Googles standards.

The code review practice is not always smooth sailing however, and so this section also gave a few tips on how to produce reviews effectively. For one, polite and professional communication is required in order to make sure code is reviewed on time and without argument. Code reviewers should make sure to communicate when they are going to review and should do so in a timely fashion in order to not keep anyone waiting. Professionalism is also needed when a developer disagrees with a review on a particular section of code as both the reviewer and developer need to be able to come to an agreement on change should be made. Another great point is also to make sure you keep small changes in order to make sure that reviewers are not overwelmed and can review quickly. Writing good commit messeges and change descriptions also helps a lot for reviewers who need to know what exactly the change is doing. Not overusing resources when not needed is also very important and this can be achieved by only having a single reviewer as well as automating as many tasks as possible. 

# Action & Reflection

This section brings up a lot of great points about how code review should be done efficiently. One that struck my eye was about the amount of reviewers on code as in our `chasten` project we have a minimum of 3 reviewers and sometimes we have up to 5 on a single change. This seems inefficient as the article said because a lot of the time reviewers will only skim through the code to ensure it works rather then actually taking time to see if it works, meaning that we have at least 3 people spending time half-heartedly reviewing code that could have been done by one person. On top of this it takes a lot of nagging to be able to make developers in our team review changes as not many developers check others quickly changes even when assigned. To fix this we could have reviews be done by just one person as this would mean that we would be able to hold this person responsible for not only completing this review on time but making sure that this change is done correctly. 

Another point that intrigued me was about accurate change descriptions as I think this is something that our team is lacking in heavily, in particular commit messeges and timing. Our commits should be done very often in order to show each individual change to certain code segments as this would allow for reviewers to see each step that was took to improve and develop this change.